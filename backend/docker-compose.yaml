# ============================================================================

# SISTEMA DE MONITORAMENTO INTELIGENTE DE CLUSTERS - IF-UFG
# ============================================================================

services:
  # ============================================================================
  # BROKER MQTT
  # ============================================================================
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: cluster-mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"  # WebSocket para dashboards
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/logs:/mosquitto/log
    environment:
      - TZ=America/Sao_Paulo
    restart: unless-stopped
    networks:
      - cluster-network
    user: "1000:1000"  # Usar UID/GID do usuário atual
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "healthcheck", "-m", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ============================================================================
  # SISTEMA DE ALERTAS
  # ============================================================================
  alerting:
    build:
      context: ./alerting
      dockerfile: Dockerfile
    container_name: cluster-alerting
    volumes:
      - ./alerting/data:/app/data
      - ./alerting/logs:/app/logs
      - ./alerting/config.py:/app/config.py:ro  # Monta config.py como volume
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - DEBUG_MODE=false
      - TZ=America/Sao_Paulo
    depends_on:
      mosquitto:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # PROMETHEUS (ARMAZENAMENTO DE MÉTRICAS)
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: cluster-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/data:/prometheus
      - ./prometheus/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--query.timeout=2m'
      - '--query.max-concurrency=20'
    environment:
      - TZ=America/Sao_Paulo
    user: "1000:1000"  # Usar UID/GID do usuário atual
    restart: unless-stopped
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # GRAFANA (VISUALIZAÇÃO)
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: cluster-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini:rw
    environment:
      - GF_SECURITY_ADMIN_USER=
      - GF_SECURITY_ADMIN_PASSWORD=
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - TZ=America/Sao_Paulo
    depends_on:
      prometheus:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    user: "1000:1000"  # Usar UID/GID do usuário atual

  # ============================================================================
  # EXPORTADOR DE DADOS (MQTT -> PROMETHEUS)
  # ============================================================================
  mqtt-exporter:
    build:
      context: ./exporter
      dockerfile: Dockerfile
    container_name: cluster-mqtt-exporter
    ports:
      - "8000:8000"
    volumes:
      - ./exporter/data:/app/data
    environment:
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - PROMETHEUS_PORT=8000
      - TZ=America/Sao_Paulo
    depends_on:
      mosquitto:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # NODE EXPORTER (MÉTRICAS DO SISTEMA)
  # ============================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: cluster-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    environment:
      - TZ=America/Sao_Paulo
    restart: unless-stopped
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # CADVISOR (MONITORAMENTO DE CONTAINERS)
  # ============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cluster-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    environment:
      - TZ=America/Sao_Paulo
    restart: unless-stopped
    networks:
      - cluster-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # NGINX (REVERSE PROXY) - DESABILITADO TEMPORARIAMENTE
  # ============================================================================
  # nginx:
  #   image: nginx:alpine
  #   container_name: cluster-nginx
  #   ports:
  #     - "8081:80"  # Mudança para porta 8081 para evitar conflito
  #     - "8443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - grafana
  #     - prometheus
  #   restart: unless-stopped
  #   networks:
  #     - cluster-network
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

# ============================================================================
# REDES
# ============================================================================
networks:
  cluster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  mosquitto_data:
  prometheus_data:
  grafana_data:
  alerting_data: 